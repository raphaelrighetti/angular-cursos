Angular é um framework que nos permite criar SPAs e nos obriga a utilizarmos o TypeScript.

Ele possui um CLI que utilizamos para fazer diversas coisas do framework, como criar um novo componente, uma nova interface e até mesmo iniciar um servidor com nossa aplicação onde temos um live-reload.

============@Component()============

É um Decorator que define diversas propriedades do nosso componente, como o "selector", que é o seletor utilizado no nome da tag HTML que irá inserir o nosso componente no "index.html".

Além disso, temos propriedades que servem para definir o caminho do template (HTML) assim como o dos estilos (CSS/SCSS), para o Angular saber onde se encontram esses arquivos que pertencem ao componente.

============GERANDO COMPONENTES============

Podemos gerar componentes utilizando o Angular CLI. Para isso, basta utilizar o comando "ng g c <nome do componente>", que teremos a estrutura completa do componente, com o template, estilo, arquivo .ts e arquivo de testes do componente.

============prefix angular.json============

Essa propriedade prefix nos diz o prefixo que nossos seletores de templates de componentes devem ter, normalmente sendo "app".

============MÓDULOS============

No Angular, nossa aplicação é dividida em módulos que contém alguns componenetes daquele módulo, assim deixando todos os componentes que devem ser carregados em determinados pontos da página juntos, não fazendo o carregamento de componentes que não são necessários naquele ponto da página.

O módulo principal é sempre o do "app" que é o "app.module.ts". Nele definimos os componentes da nossa aplicação que serão carregados no template do "app" a partir da propriedade "declarations", onde passamos a classe do nosso componente e só assim conseguimos utilizá-lo no "app".

Como o módulo do "aap" é o principal e o que irá ser utilizado no início da aplicação, ele tem uma propriedade diferente nele, que é a "bootsstrap", que indica qual é o componente a ser carregado no boot da aplicação.

============PROPERTY BINDING============

Property Binding nada mais é do que a ação de atribuirmos à uma propriedade de algum elemento HTML do nosso template o valor de alguma propriedade da classe do nosso componente, assim podendo tornar o valor dessa propriedade do elemento HTML dinâmico.

Para fazer isso, precisamos primeiro ter uma propriedade na nossa classe component que pode ser o que nós quisermos e, no arquivo .html, passarmos entre colchetes o nome da propriedade do elemento na qual queremos atribuir o valor da propriedade da classe, seguindo com o nome que colocamos na propriedade da nossa classe.

Exemplo:

[value]="minhaProp.valor"

O que faz com que o valor da propriedade seja colocado no nosso elemento é justamente esses colchetes.

Quando queremos fazer o Property Binding no InnerText de algum elemento HTML a sintaxe é um pouco diferente. Como não temos uma propriedade para envolver nos colchetes e queremos passar o valor como valor de texto da tag, temos que usa a sintaxe de chaves duplas: "{{ <minhaProp.valor> }}".

Exemplo:

<p>{{ meuTexto.mensagem }}</p>

Dessa forma utilizamos o Property Binding com a interpolação.

Também podemos utilizar essa interpolação para nomes de classes e muitas outras coisas nos elementos HTML, por exemplo:

<p class="{{ minhaProp.estiloP }}">Este é um parágrafo estilizado</p>

============EVENT BINDING============

Event Binding nada mais é do que incluir um evento em algum elemento HTML que irá disparar alguma função da nossa classe.

Para fazer isso, basta inserir uma propriedade no elemento HTML com o nome do evento que queremos entre parênteses e a função que queremos disparar como valor.

Exemplo:

(click)="handleClick()"

Dessa forma será disparada a função "handleClick" todas as vezes que o usuário clicar no elemento.

============TWO-WAY DATA BINDING============

Os dois exemplos acima são Data Bindings de uma mão só, ou seja, só ocorrem modificacões com base em um dos lados para ocorrer no outro.

Two-way Data Binding é o recurso capaz de fazer o binding tanto em alterações no component quanto no template, modificando os dados nos dois.

Para utilizar este recurso, devemos utilizar a diretiva "ngModel", que faz parte do módulo "FormsModule" do Angular.

A sintaxe dessa diretiva é uma junção das sintaxes do Property e Event Binding, utilizando colchetes e parênteses.

Exemplo:

[(ngModel)]="minhaProp.valor"

Dessa forma, tanto o template quanto o component são modificados quando o usuário modifica o valor de algum campo ou algo do tipo.

O "ngModel" ocupa o espaço do "value" dos inputs.

No caso de um checkbox, o "ngModel" não irá sobrescrever o valor do checkbox onde você colocá-lo, mas sim selecionar o que tiver definido na propriedade da classe, tambpem passando o selecionado para a propriedade da classe a partir do template.

============DIRETIVAS============

Diretivas são classes que conseguem modificar elementos em Runtime nas aplicações Angular.

As diretivas do Angular são classes já prontas para o uso e podem ser encontradas em diversos módulos do Angular.

============router-outlet============

"router-outlet" é uma tag que colocamos no nosso template para utilizarmos o roteamento do Angular, assim podendo acessar em um ponto específico de nossa página outro componente externo, sem ter que fazer o reload da página.

Importante saber que quando mudamos a rota, a página ainda será a mesma, com tudo o que definimos na página raiz do app, apenas mudando o local onde adicionamos a tag "<router-outlet></router-outlet>" e renderizando o template do componente que colocamos na rota.

============ROTAS============

Para definirmos rotas, vamos no arquivo "app-routing.module.ts" e adicionamos as nossas rotas na constante "routes".

As rotas são representadas em objetos com diversas propriedades disponíveis, as mais comuns sendo "path", que define o caminho da rota, e "component", que define o componente a ser renderizado no "router-outlet" quando aquela rota for acessada.

============ROUTER LINK============

É uma diretiva que adicionamos em aqlgum elemento do template que transforma o elemento em um link para outra rota da nossa aplicação.

É importante lembrar que sempre temos que passar a "/" no começo da rota no "routerLink", pois se não passarmos a rota será adicionada à rota que já está acessada.

Exemplo:

routerLink="/pessoas/cadastrar"

Podemos usar o "routerLinkActive" no nosso elemento para dizer que aquela rota é a que está ativa no momento.

Podemos também utilizar o "Router", que é uma alternativa bem boa, pois nos dá a possibilidade de navegar para outra rota por base em algo no código, não só com a interação do usuário em um botão, por exemplo.

Podemos utilizar o Router com a injeção de dependências.

============*ngFor============

*ngFor é uma diretiva que nos permite fazer um for em uma lista de componentes para serem adicionados dinamicamente no nosso template, o que é muito útil quando estamos trabalhando com dados que chegam de um back-end e não temos como ter certeza dos dados que estarão lá.

É uma diretiva estrutural que consegue modificar os elementos no HTML.

É importante lembrar que não devemos colocar essa diretiva diretamente no componente em que queremos usá-la, e sim na tag mãe dele.

Precisamos passar uma expressão para esse "*ngFor", que é igual às expressões que passamos para um for normal, como o for...in, for...of, etc.

Sintaxe:

*ngFor="let item of list"

============Comunicação entre componentes no *ngFor============

Como precisamos de uma lista de componentes para utilizar o *ngFor no nosso template, precisamos de comunicação entre o componente onde está a lista de componentes e o componente do qual a lista é formada.

Para ter essa comunicação, o componente do qual a lista é formada deve ser um "Dumb Component", ou seja, um componente que não possui nenhuma informação de fato e irá receber as informações necessárias por fora.

Para isso, basta utilizarmos o Decorator @Input() logo acima do objeto do nosso Dumb Component, assim dizendo que os dados que devem estar nesse objeto serão recebidos a partir de outro componente que irá enviá-los.

Exemplo:

export class PensamentoComponent {
  @Input()
  pensamento = {
    conteudo: '',
    autoria: '',
    modelo: '',
  };
}

Só isso não basta, pois mesmo o Dumb Component estando pronto para receber os dados de outro componente, ainda não passamos esses dados para ele no outro componente.

Para isso, precisamos utilizar o Property Binding, dessa vez passando o nome da propriedade objeto nos colchetes e atribuindo a variável que representa o item da lista nessa propriedade.

Exemplo:

<section class="mural" *ngFor="let pensamento of pensamentos">
  <app-pensamento [pensamento]="pensamento"></app-pensamento>
</section>

Meio complexo de entender, mas é só ter em mente que precisamos passar esses dados para o componente filho a partir do componente pai e esse é o jeito que fazemos isso.

============*ngIf============

*ngIf é uma diretiva que nos permite adicionar condições no nosso template, ou seja, nos permite renderizar algo diferente no nosso template se alguma condição for verdadeira ou não.

Nessa diretiva passamos a nossa expressão como se fosse a expressão de um if convencional mesmo, podendo inclusive passar um else, mas aí a sintaxe fica meio diferente.

Exemplo:

<div class="mural" *ngIf="pensamentos.length > 0, else semPensamentos">
  <div *ngFor="let pensamento of pensamentos">
    <app-pensamento [pensamento]="pensamento"></app-pensamento>
  </div>
</div>

Dessa forma, a div que está envolvida na div que contém o *ngIf será renderizada somente se a expressão que passamos no *ngIf for verdadeira. Se não for, o "ng-template" de nome "semPensamentos" que será renderizado no lugar.

============<ng-template #nome></ng-template>============

A tag "ng-template" é uma tag especial que nunca é renderizada por padrão e só é renderizada quando chamamos ela explicitamente pelo nome, normalmente utilizada no *ngIf.

Para declararmos o nome do ng-template, basta passar o nome que queremos após o sinal "#".

Exemplo:

<ng-template #semPensamentos>
  <div class="ff-inter sem-pensamentos">
    <p>Ainda não há nenhum pensamento cadastrado.</p>
  </div>
</ng-template>

============NgClass============

NgClass é uma diretiva usada para colocar classes CSS dinâmicas em elementos HTML nos nossos componentes, o que é muito útil quando queremos mudar o estilo de um elemento tendo base em condições.

Para usarmos essa diretiva, usamos a mesma sintaxe de Property Binding, passando o "NgClass" dentro de colchetes e passando a classe como valor.

Para o valor da classe ser dinâmico, podemos criar um método no nosso componente que retorna uma string que é o nome da classe, retornando uma classe diferente baseado em condições.

Sintaxe:

<div class="pensamento {{ pensamento.modelo }} ff-roboto-mono" [ngClass]="largura()">

Função "largura()":

largura(): string {
  if (this.pensamento.conteudo.length >= 256) {
    return 'pensamento-g';
  } else {
    return 'pensamento-p';
  }
}

Também podemos usar o NgClass com expressões booleanas, por exemplo:

[ngClass]="{'color-blue': active}">

Nesse caso estamos passando um objeto que contém a propriedade "color-blue" que recebe o valor da propriedade "active", que é um booleano. Se o valor de active for true, a classe "color-blue" será aplicada no elemento, se for false a classe não será aplicada.

============INTERFACES============

No Angular podemos utilizar as interfaces do TypeScript normalmente, normalmente utilizando-as para receber e enviar dados ao backend.

============SERVICES============

São classes responsáveis por executar alguma ou algumas funcionalidades que vão poder ser usadas nos nossos componentes e demais classes da nossa aplicação.

Todas as classes service precisam ser "@Injectable()", o que faz com que consigamos utilizá-las injetadas em outras classes por meio da injeção de dependências.

O parâmetro "providedIn" diz respeito ao acesso da dependência em nossa aplicação, sendo "root" a aplicação inteira.

============INJEÇÃO DE DEPENDÊNCIAS============

No angular também temos a injeção de dependências, assim tornando possível utilizarmos uma instância de uma classe sem termos que instanciar ela nós mesmos.

Para usar a injeção de dependências, basta colocarmos um atributo privado no construtor da classe service, usando o recurso que nos permite criar atributos para a classe a partir do construtor, com o tipo da classe que queremos injetar e já podemos utilizá-la normalmente.

O que torna uma classe injetável é o Decorator "@Injectable()".

============HttpClient============

HttpClient é o recurso do Angular que utilizamos para fazer requisições HTTP à APIs.

Para utilizá-lo, precisamos importar o "HttpClientModule" no nosso módulo do app.

Assim que temos ele disponível no nosso service com a injeção de dependências, basta utilizarmos os métodos disponíveis na instância que temos no nosso service conforme o necessário, podendo, inclusive, tipar o retorno da requisição com o uso de Generics.

Entretanto, precisamos utilizar o "Observable", um recurso do rxjs que nos permite tornar um endpoint da API observável, assim nos permitindo observar toda mudança que aconteça nesse endpoint.

Os métodos que fazem as requisições na API do HttpClient já retornam um Observable, mas precisamos explicitar esse retorno no nosso método para conseguirmos utilizá-lo.

Com esse Observable sendo retornado, basta invocarmos o método do nosso service com um instância injetada dele em algum componente e usar o método "subscribe", que recebe uma função de callback que vai ser o que será executado quando a resposta chegar. É aí que fazemos a ação de atribuir os valores para algum objeto ou lista ou o que quisermos fazer com os dados recebidos.

============ActivatedRoute============

É uma classe que pode ser injetada nos nossos componentes e nos dá acesso a uma série de informações sobre a rota que está ativa no router-outlet do nosso app.

Podemos usar ela para pegar uma Path Variable da nossa rota, como, por exemplo, o id de algum objeto a ser deletado ou modificado que passamos na rota.

Para isso, basta utilizarmos as propriedades "snapshot", "paramMap" e o método "get(<nome da Path Variable>)".

Assim conseguimos ter essa variável salva no nosso componente.

============PATH VARIABLE EM ROTAS============

Podemos usar um Path Variable nas nossas rotas do app.

Para isso, basta colocarmos o nome de variável após o sinal ":" na nossa rota.

Exemplo:

{ path: 'pensamento/excluir/:id', component: ExcluirPensamentoComponent }

============FORMULÁRIOS REATIVOS============

No Angular, já temos um módulo pronto para termos formulários reativos, que é o "ReactiveFormsModule", que podemos importar no nosso módulo do app.

Essencialmente, o que ele faz é nos possibilitar a ter toda a reatividade que queremos no nosso formulário, ou seja, quando usamos esse módulo, não precisamos utilizar a diretiva "ngModel" para fazer o Two Way Data Binding, por exemplo.

Também nos ajuda muito a fazer validações no nosso formulário, como campos obrigatórios, campos somente de texto e etc.

Para utilizarmos as classes desse módulo, precisamos tê-lo importado no nosso módulo do app. Dessa forma, podemos utilizar as classes do módulo nos nossos componentes.

Primeiro de tudo, precisamos ter uma propriedade no nosso componente do tipo "FormGroup", que vai ser o grupo de campos dos quais o nosso formulário consiste. Devemos iniciar essa propriedade vazia, utilizando o operador "!" para counterar o null. Essa propriedade precisa ser um objeto que vai ter todos os campos do nosso formulário.

Para adicionarmos os campos do nosso formulário, devemos adicionar cada um deles com o tipo "FormControl". Temos duas formas de fazer isso:

1. Com o "FormBuilder":

  ngOnInit(): void {
    this.formulario = this.formBuilder.group({
      conteudo: ['Formulário reativo'],
      autoria: ['Angular'],
      modelo: ['modelo1'],
    });
  }

  Dessa forma teremos todos os "FormControls" inicializando-os de forma mais intuitiva, passando arrays com os valores.

  Precisamos injetar o "FormBuilder" no nosso componente para usá-lo.

2. Sem o "FormBuilder":

  ngOnInit(): void {
    this.formulario = new FormGroup({
      conteudo: new FormControl(''),
      autoria: new FormControl(''),
      modelo: new FormControl('')
    })
  }

  Dessa forma temos o mesmo resultado que temos com o "FormBuilder", porém temos que inicializar as instâncias manualmente.

  As duas formas são corretas e dependem somente do gosto e do padrão que o projeto está seguindo, pois as duas formas funcionam exatamente do mesmo jeito por baixo dos panos.

Para utilizarmos esse formulário reativo no nosso template, temos que adicionar a seguinte Property Binding na nossa tag "form":

[formGroup]="<nome da propriedade FormGroup>"

Além disso, temos que adicionar a propriedade "formControlName" com exatamente o mesmo nome do "FormControl" no nosso "FormGroup" nos inputs do formulário que temos no nosso template.

Dessa forma já temos o Two Way Data Binding dos nossos campos do formulário.

Se quisermos pegar o valor de algum "FormControl" do nosso "FormGroup", precisamos utilizar os seguintes métodos e propriedades do "FormGroup":

<FormGroup>.get('<FormControl>')?.value

Usamos esse operador "?" para especificar que esse valor pode ser nulo.

Utilizando todos esses conceitos, temos o formulário reativo que atualiza os dados na página conforme o input do usuário.


============VALIDACOES FormControl============

O Angular possui uma classe "Validators", que é responsável por fazer diversas validações já prontas, como colocar um tamanho mínimo ou máximo de caracteres no input, adicionar um padrão com regex que aquele input deve seguir, enfim.

Para utilizarmos ela, basta adicionarmos outro array como segundo item do array que colocamos para cada FormControl no FormBuilder que irá conter alguns métodos da classe "Validators", por exemplo:

  ngOnInit(): void {
    this.formulario = this.formBuilder.group({
      conteudo: ['', [Validators.required]],
      autoria: ['', [Validators.required]],
      modelo: ['modelo1'],
    });
  }

Neste exemplo estamos dizendo que os dois primeiros FormControls do FormGroup são obrigatórios, e essa validação já irá ocorrer.

Podemos pegar o resultado da validação utilizando a propriedade "value" do nosso FormGroup, assim podendo fazer ou não fazer alguma ação conforme o resultado da validação.

Se quisermos fazer mais de uma validação em um FormGroup, em vez de passar o array com os métodos de "Validators", podemos passar o método "Validators.compose([<métodos>])", assim tendo mais de um método de validação funcionando ao mesmo tempo.


============ACESSANDO ERROS DE VALIDAÇÃO============

Para acessar os erros de validação que podem ocorrer em um FormControl. basta acessarmos a propriedade "errors" dele. Nessa propriedade é salvo um objeto que contém o tipo do erro como e a mensagem como chave-valor.

Para mostrarmos uma mensagem personalizada na tela quando um erro ocorrer, podemos utilizar essa propriedade "errors" juntamente com a diretiva *ngIf, assim renderizando o campo somente se um erro de validação tiver ocorrido. Por exemplo:

  <div class="mensagem__erro"
    *ngIf="formulario.get('conteudo')?.errors>
    Pensamento é obrigatório!
  </div>

Dessa forma, o erro aparecerá mesmo se o usuário não tiver interagido com o formulário, o que não é o ideal. Também era mostrar a mesma mensagem de erro para qualquer erro que tiver ocorrido, o que também não é o ideal. Para combatermos isso, podemos especificar o erro que queremos e especificar que só deve ser renderizada a mensagem de erro se o campo tiver tido interação do usuário. Fazemo isso da seguinte forma:

  <div class="mensagem__erro"
    *ngIf="formulario.get('conteudo')?.errors?.['required'] && formulario.get('conteudo')?.touched">
    Pensamento é obrigatório!
  </div>
  <div class="mensagem__erro"
    *ngIf="formulario.get('conteudo')?.errors?.['pattern'] && formulario.get('conteudo')?.touched">
    Pensamento não pode conter apenas espaços vazios!
  </div>

Dessa forma especificamos o erro com a sintaxe "errors.['<nome do erro>']" e especificamos que só é para ser renderizado se a propriedade "touched" do FormControl for true, assim só renderizando após a interação do usuário.

Não entendi muito bem o porque de a sintaxe para acessar um erro específico ser dessa forma, mas é assim que funciona.

Podemos também habilitar e desabilitar botões e elementos da página com base nas validações do formulário.

Para isso, basta utilizarmos o [ngClass] junto com o [disabled], passando os valores pegados do nosso componentes.

============HttpParams============

É uma classe do Angular que nos permite trabalhar com parâmetros nas URLs de forma mais fácil do que escrevermos eles diretamente na string da URL em si.

Possui vários métodos que nos auxiliam nisso.

Para utilizar esses parâmetros, basta criarmos uma variável do tipo HttpParams e ir concatenando os métodos conforme a nossa necessidade.

Após isso, devemos passar essa variável na propriedade "params" do objeto que podemos passar como segundo argumento nos métodos do HttpClient.
